<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jane - A super concise theme for Hugo</title>
    <link>http://wantsuchen.top/post/</link>
    <description>Recent content in Posts on Jane - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Mar 2020 13:34:36 +0800</lastBuildDate>
    
	<atom:link href="http://wantsuchen.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>防抖和节流</title>
      <link>http://wantsuchen.top/post/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</link>
      <pubDate>Fri, 06 Mar 2020 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</guid>
      <description>防抖动是将多次执行变为最后一次执行， 节流是将多次执行变成每隔一段时间执行。 /** * underscore 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait</description>
    </item>
    
    <item>
      <title>Vue中的 .sync 修饰符</title>
      <link>http://wantsuchen.top/post/vue%E4%B8%AD%E7%9A%84.sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Wed, 05 Feb 2020 11:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/vue%E4%B8%AD%E7%9A%84.sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>Vue.js官方文档 在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件</description>
    </item>
    
    <item>
      <title>computed和watch的区别</title>
      <link>http://wantsuchen.top/post/computed%E5%92%8Cwatch%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 03 Feb 2020 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/computed%E5%92%8Cwatch%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>computed和watch computed是计算属性 使用的时候不需要加括号 计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生</description>
    </item>
    
    <item>
      <title>Vue数据响应式原理</title>
      <link>http://wantsuchen.top/post/vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 22 Jan 2020 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</guid>
      <description>数据响应式 若一个物体能对外界的刺激做出反应，它就是响应式的。 Vue的data是响应式，即数据响应式 const vm = new Vue({data: {n:0}}) 我如果修改vm.n，那么UI中</description>
    </item>
    
    <item>
      <title>Vue 两个版本</title>
      <link>http://wantsuchen.top/post/vue%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC/</link>
      <pubDate>Wed, 15 Jan 2020 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/vue%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC/</guid>
      <description>两个版本对应的文件名 完整版：vue.js 只包含运行时版(非完整版)：vue.runtime.js 完整版：同时包含编译器和运行时的版本。 编译器</description>
    </item>
    
    <item>
      <title>浅析MVC</title>
      <link>http://wantsuchen.top/post/%E6%B5%85%E6%9E%90mvc/</link>
      <pubDate>Fri, 03 Jan 2020 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/%E6%B5%85%E6%9E%90mvc/</guid>
      <description>MVC三类对象 MVC是一种架构设计模式，它通过关注点分离鼓励改进应用程序组织。 MVC包括三类对象，将他们分离以提高灵活性和复用性。 模型mod</description>
    </item>
    
    <item>
      <title>关于我对前端的理解</title>
      <link>http://wantsuchen.top/post/%E6%88%91%E5%AF%B9%E5%89%8D%E7%AB%AF%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 24 Dec 2019 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/%E6%88%91%E5%AF%B9%E5%89%8D%E7%AB%AF%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>前端工程师是最贴近用户的程序员，前端工作可以实现页面交互，提升用户体验，参与项目开发，快速、高质量地完成实现效果图，精准到1px。 与团队成员</description>
    </item>
    
    <item>
      <title>JS的继承</title>
      <link>http://wantsuchen.top/post/js%E7%9A%84%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Mon, 23 Dec 2019 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/js%E7%9A%84%E7%BB%A7%E6%89%BF/</guid>
      <description>基于原型的继承 function Animal () { this.x = 1 } Animal.prototype.move = function() { console.log(&amp;#39;Animal-move&amp;#39;) } function Dog () { Animal.apply(this, arguments) this.xx = 2 } let f = function() {} f.prototype = Animal.prototype Dog.prototype = new f() Dog.prototype.constructor = Dog Dog.prototype.run = function(){ console.log(&amp;#39;Dog-run&amp;#39;) } 重点： let f = function() {} f.prototype = Animal.prototype Dog.prototype = new f() Dog.prototype.constructor = Dog 基</description>
    </item>
    
    <item>
      <title>事件机制</title>
      <link>http://wantsuchen.top/post/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 23 Dec 2019 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>什么是事件委托 事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown&amp;hellip;&amp;hellip;）的函数委托到另一个元</description>
    </item>
    
    <item>
      <title>跨域问题</title>
      <link>http://wantsuchen.top/post/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 22 Dec 2019 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
      <description>什么是同源 源 = 协议 + 域名 + 端口号 window.origin或location.origin可以得到当前源 如果两个url的协议 域名 端口号全都一</description>
    </item>
    
    <item>
      <title>Promise介绍</title>
      <link>http://wantsuchen.top/post/promise%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 18 Dec 2019 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/promise%E4%BB%8B%E7%BB%8D/</guid>
      <description>Promise 的用途 Promise是ES6新增的语法，解决了回调地狱的问题 Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值. Promise 对象是一个代理对</description>
    </item>
    
    <item>
      <title>JS数组去重</title>
      <link>http://wantsuchen.top/post/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Tue, 17 Dec 2019 13:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</guid>
      <description>著名面试题： 如何实现数组去重？ 假设有数组 array = [1,5,2,3,4,2,3,1,3,4] 你要写一个函数 unique，使得 unique(array) 的值为 [1,5,2,3,4] 也就是把重复的值都去掉，只保留不重复的值。 一个答案不</description>
    </item>
    
    <item>
      <title>http知识点</title>
      <link>http://wantsuchen.top/post/http%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Thu, 12 Dec 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/http%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>一 HTTP 响应状态码 HTTP 响应状态代码指示特定 HTTP 请求是否已成功完成。响应分为五类： 1. 信息响应(100–199) 2. 成功响应(200–299) 3. 重定向(3</description>
    </item>
    
    <item>
      <title>闭包和执行上下文</title>
      <link>http://wantsuchen.top/post/%E9%97%AD%E5%8C%85%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Tue, 10 Dec 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/%E9%97%AD%E5%8C%85%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>一 什么是闭包？ 闭包翻译自英文单词closure，这是个不太好翻译的词。编译原理中，它是处理语法产生式的一个步骤；而在编程语言领域，它表示一种</description>
    </item>
    
    <item>
      <title>apply,call和bind</title>
      <link>http://wantsuchen.top/post/applycall%E5%92%8Cbind/</link>
      <pubDate>Sat, 07 Dec 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/applycall%E5%92%8Cbind/</guid>
      <description>一 apply 语法 func.apply(thisArg, [argsArray]) 参数 thisArg 可选的。在 func 函数运行时使用的 this 值。 （注意，this可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined</description>
    </item>
    
    <item>
      <title>jQuery设计思想</title>
      <link>http://wantsuchen.top/post/jquery%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</link>
      <pubDate>Sun, 10 Nov 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/jquery%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</guid>
      <description>jQuery的基本设计思想和主要用法，就是选择某个网页元素，然后对其进行某种操作。 这是它区别于其他Javascript库的根本特点。 一 jQu</description>
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>http://wantsuchen.top/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sat, 26 Oct 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>一 为什么如下代码会打印 6 个 6 let i = 0 for(i = 0; i &amp;lt; 6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 当setTimeout()的毫秒数设置为0的时候，是要先执行完函数调用栈中的代码，</description>
    </item>
    
    <item>
      <title>JS排序算法</title>
      <link>http://wantsuchen.top/post/js%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 26 Oct 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/js%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>一 选择排序 选择排序 即在当前区间选出一个最小值和区间第一个数交换位置，区间大小减一 一共有n个数， 第一次遍历n个数，第二次遍历n-1个数，以此类</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>http://wantsuchen.top/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 20 Oct 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>一 声明对象的两种语法 对象的定义 无序的数据集合 键值对的集合 对象的写法 let obj = {&#39;name&#39;: &#39;zwx&#39;, &#39;age&#39;: 18, } let obj = new Object({&#39;name&#39;: &#39;zwx&#39;}) 细节 键名是字符串，可以包含任意Unicode字</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>http://wantsuchen.top/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 14 Oct 2019 19:34:36 +0800</pubDate>
      
      <guid>http://wantsuchen.top/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>一 表达式和语句 JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。 语句（statement）是为了完成某</description>
    </item>
    
  </channel>
</rss>